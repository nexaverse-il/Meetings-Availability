Version 3:

📝 תיאור
אוטומציה זו מייצרת באופן אוטומטי חלונות זמן זמינים לפגישות (time slots) בטבלת Airtable ייעודית, בהתאם לשעות פעילות מוגדרות מראש. האוטומציה תוכננה לרוץ מדי יום ב-6:00 בבוקר ולייצר חלונות זמן רק עבור היום הנוכחי.
📊 מבנה הנתונים
טבלאות

Business Research ⚙️ - טבלה המכילה את הגדרות העסק וזמני הפעילות
Meetings Availability🌻 - טבלה שבה נוצרים חלונות הזמן הזמינים לפגישות

שדות מרכזיים
טבלת Business Research ⚙️:

Availability Settings Active - צ'קבוקס האם מערכת הזמינות פעילה
Default Meeting Duration - משך ברירת מחדל לפגישה (בשניות)
שדות לכל יום בשבוע:

{Day} Active - האם היום פעיל (צ'קבוקס)
{Day} Start Time - שעת התחלה (פורמט: "HH:MM")
{Day} End Time - שעת סיום (פורמט: "HH:MM")



טבלת Meetings Availability🌻:

Time Slots - תאריך ושעה של תחילת חלון הזמן
Duration⏳ - משך חלון הזמן (אירטייבל משתמש בערך ברירת מחדל)

💻 קוד האוטומציה
javascriptCopy// Get business research record
const businessResearchTable = base.getTable('Business Research ⚙️');
const meetingsAvailabilityTable = base.getTable('Meetings Availability🌻');

// Helper function for output that works in any environment
function logOutput(message) {
    console.log(message);
    
    // Try different output methods depending on environment
    try {
        if (typeof output !== 'undefined' && output.text) {
            output.text(message);
        }
    } catch (e) {
        // Ignore errors with output methods
    }
}

// Get current date and day of week
const currentDate = new Date();
const currentDayOfWeek = currentDate.getDay(); // 0 = Sunday, 1 = Monday, etc.
const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
logOutput(`Today is ${dayNames[currentDayOfWeek]}, ${currentDate.toLocaleDateString()}`);

// Check if slots already exist for today
const today = new Date(currentDate);
today.setHours(0, 0, 0, 0);
const tomorrow = new Date(today);
tomorrow.setDate(tomorrow.getDate() + 1);

// Check for existing slots
const existingSlots = await meetingsAvailabilityTable.selectRecordsAsync({
    filterByFormula: `AND(
        IS_AFTER({Time Slots}, DATETIME_PARSE("${today.toISOString()}")), 
        IS_BEFORE({Time Slots}, DATETIME_PARSE("${tomorrow.toISOString()}"))
    )`
});

if (existingSlots.records.length > 0) {
    logOutput(`Found ${existingSlots.records.length} existing slots for today. Skipping creation.`);
    return;
}

// Query for records with Availability Settings Active
const query = await businessResearchTable.selectRecordsAsync({
    filterByFormula: "AND({Availability Settings Active} = TRUE())",
    fields: ['Business Name', 'Availability Settings Active', 'Default Meeting Duration',
            'Sunday Active', 'Sunday Start Time', 'Sunday End Time',
            'Monday Active', 'Monday Start Time', 'Monday End Time',
            'Tuesday Active', 'Tuesday Start Time', 'Tuesday End Time',
            'Wednesday Active', 'Wednesday Start Time', 'Wednesday End Time',
            'Thursday Active', 'Thursday Start Time', 'Thursday End Time',
            'Friday Active', 'Friday Start Time', 'Friday End Time',
            'Saturday Active', 'Saturday Start Time', 'Saturday End Time']
});

if (query.records.length === 0) {
    logOutput("No records with active availability settings found. Aborting.");
    return;
}

// Use the first matching record
const record = query.records[0];
const recordId = record.id;
logOutput(`Found business record: ${record.getCellValue('Business Name')}`);

// Get time slots configuration
// Default to 30 minutes (1800 seconds)
const defaultDuration = 1800;
logOutput(`Using meeting duration: ${defaultDuration} seconds (${defaultDuration/60} minutes)`);

// Days configuration lookup
const daysConfig = {
    0: { // Sunday
        active: record.getCellValue('Sunday Active'),
        startTime: record.getCellValue('Sunday Start Time'),
        endTime: record.getCellValue('Sunday End Time')
    },
    1: { // Monday
        active: record.getCellValue('Monday Active'),
        startTime: record.getCellValue('Monday Start Time'),
        endTime: record.getCellValue('Monday End Time')
    },
    2: { // Tuesday
        active: record.getCellValue('Tuesday Active'),
        startTime: record.getCellValue('Tuesday Start Time'),
        endTime: record.getCellValue('Tuesday End Time')
    },
    3: { // Wednesday
        active: record.getCellValue('Wednesday Active'),
        startTime: record.getCellValue('Wednesday Start Time'),
        endTime: record.getCellValue('Wednesday End Time')
    },
    4: { // Thursday
        active: record.getCellValue('Thursday Active'),
        startTime: record.getCellValue('Thursday Start Time'),
        endTime: record.getCellValue('Thursday End Time')
    },
    5: { // Friday
        active: record.getCellValue('Friday Active'),
        startTime: record.getCellValue('Friday Start Time'),
        endTime: record.getCellValue('Friday End Time')
    },
    6: { // Saturday
        active: record.getCellValue('Saturday Active'),
        startTime: record.getCellValue('Saturday Start Time'),
        endTime: record.getCellValue('Saturday End Time')
    }
};

// Check if current day is configured as active
const dayConfig = daysConfig[currentDayOfWeek];
if (!dayConfig.active || !dayConfig.startTime || !dayConfig.endTime) {
    logOutput(`${dayNames[currentDayOfWeek]} is not set as an active day or is missing time settings. No slots will be created.`);
    return;
}

// Time slots to create
const timeSlots = [];

// Parse start and end times
const [startHour, startMinute] = dayConfig.startTime.split(':').map(Number);
const [endHour, endMinute] = dayConfig.endTime.split(':').map(Number);

// Create DateTime objects for today's start and end times
const startDateTime = new Date(currentDate);
startDateTime.setHours(startHour, startMinute, 0, 0);

const endDateTime = new Date(currentDate);
endDateTime.setHours(endHour, endMinute, 0, 0);

// Log the time range
logOutput(`Creating slots for today (${startDateTime.toLocaleDateString()}): ${startDateTime.toLocaleTimeString()} to ${endDateTime.toLocaleTimeString()}`);

// Generate time slots for today
let currentSlot = new Date(startDateTime);
while (currentSlot < endDateTime) {
    const slotEndTime = new Date(currentSlot.getTime() + defaultDuration * 1000);
    
    // Only add the slot if it ends before or at the end time
    if (slotEndTime <= endDateTime) {
        timeSlots.push({
            fields: {
                'Time Slots': currentSlot.toISOString()
            }
        });
    }
    
    // Move to next slot
    currentSlot = new Date(currentSlot.getTime() + defaultDuration * 1000);
}

logOutput(`Created ${timeSlots.length} slots for today (${currentDate.toLocaleDateString()})`);

if (timeSlots.length === 0) {
    logOutput("No time slots to create. Check your availability settings.");
    return;
}

// Create records in batches of 50 (Airtable limit)
const batchSize = 50;
let createdCount = 0;

for (let i = 0; i < timeSlots.length; i += batchSize) {
    const batch = timeSlots.slice(i, i + batchSize);
    try {
        const result = await meetingsAvailabilityTable.createRecordsAsync(batch);
        createdCount += result.length;
        logOutput(`Created batch ${Math.floor(i/batchSize) + 1} of ${Math.ceil(timeSlots.length/batchSize)} (${createdCount}/${timeSlots.length} slots)`);
    } catch (error) {
        logOutput(`Error creating batch ${Math.floor(i/batchSize) + 1}: ${error.message}`);
    }
}

const resultMessage = `Created ${createdCount} meeting availability slots for ${dayNames[currentDayOfWeek]}, ${currentDate.toLocaleDateString()}.`;
logOutput(resultMessage);
🛠 פתרונות לבעיות שהתגלו
1. שדה Duration בפורמט מיוחד
בעיה: הניסיון לשלוח ערך מפורש לשדה Duration⏳ גורם לשגיאה
פתרון: השארת השדה ריק כדי שאירטייבל ישתמש בערך ברירת המחדל
2. יצירת כפילויות במהלך ריצות חוזרות
בעיה: ריצת האוטומציה מספר פעמים באותו יום יוצרת כפילויות של חלונות זמן
פתרון: בדיקת קיום חלונות זמן ליום הנוכחי לפני יצירת חדשים
3. התאמה ספציפית ליום
בעיה: הקוד המקורי יצר חלונות זמן לטווח תאריכים שלם
פתרון: מיקוד ביום הנוכחי בלבד
⚙️ הגדרת האוטומציה באירטייבל

צור אוטומציה חדשה:

עבור לטאב Automations באירטייבל
לחץ על "+ New Automation"


הגדר טריגר זמני:

בחר טריגר "At a scheduled time"
הגדר כל יום בשעה 6:00 בבוקר


הוסף צעד סקריפט:

בחר את הפעולה "Run script"
העתק את הקוד לעיל


שמור והפעל את האוטומציה

🔄 סדר הפעולה

בדיקת חלונות זמן קיימים: האוטומציה תחילה בודקת האם כבר קיימים חלונות זמן ליום הנוכחי, ואם כן - מדלגת על היצירה
זיהוי הגדרות זמינות: אוספת את הגדרות הזמינות עבור היום הנוכחי מטבלת Business Research
בדיקת יום פעיל: בודקת אם היום הנוכחי מוגדר כפעיל ובעל שעות מוגדרות
יצירת חלונות זמן: מייצרת חלונות זמן של 30 דקות מהשעה המוגדרת כתחילת הפעילות ועד לסיום הפעילות
שמירה בטבלה: שומרת את חלונות הזמן החדשים בטבלת Meetings Availability במנות של עד 50 רשומות

🌟 יתרונות האוטומציה

מניעת עבודה ידנית: אין צורך להזין ידנית חלונות זמן מדי יום
גמישות בהגדרות: ניתן לשנות בקלות את שעות הפעילות לכל יום בשבוע
מניעת כפילויות: האוטומציה מוודאת שלא ייווצרו כפילויות גם אם היא רצה מספר פעמים
התאמה ספציפית ליום: יוצרת חלונות זמן רק עבור הימים הרלוונטיים

📋 הערות נוספות

בהגדרות היום הפעילות, חשוב להקפיד על פורמט השעה "HH:MM" (לדוגמה: "09:00", "16:00")
האוטומציה יוצרת חלונות זמן של 30 דקות (1800 שניות) כברירת מחדל
אם היום אינו מוגדר כפעיל או חסרים זמני התחלה/סיום, לא ייווצרו חלונות זמן
הקוד כולל לוגים מפורטים המסייעים באיתור בעיות
