סיכום אוטומציית יצירת חלונות זמני פגישות בAirtable
מטרת האוטומציה
יצירה אוטומטית של חלונות זמן זמינים לפגישות במערכת הAirtable. האוטומציה מתוכננת לרוץ בכל יום ב-6:00 בבוקר וליצור חלונות זמן לאותו היום בלבד, בהתאם להגדרות הזמינות המוגדרות מראש.
טבלאות וקשרים

Business Research ⚙️ - טבלה המכילה את הגדרות הזמינות והגדרות התצורה
Meetings Availability🌻 - טבלה שבה נוצרים חלונות הזמן הפנויים

שדות חשובים
בטבלת Business Research ⚙️:

Availability Settings Active - האם מערכת הזמינות פעילה
Default Meeting Duration - משך ברירת מחדל לפגישה (בשניות)
Sunday Active עד Saturday Active - סימון אילו ימים פעילים
Sunday Start Time עד Saturday End Time - שעות התחלה וסיום לכל יום

בטבלת Meetings Availability🌻:

Time Slots - זמן התחלת חלון זמן הפגישה
Duration⏳ - משך חלון הזמן

הקוד הסופי
javascriptCopy// Get business research record
const businessResearchTable = base.getTable('Business Research ⚙️');
const meetingsAvailabilityTable = base.getTable('Meetings Availability🌻');

// Helper function for output that works in any environment
function logOutput(message) {
    console.log(message);
    
    // Try different output methods depending on environment
    try {
        if (typeof output !== 'undefined' && output.text) {
            output.text(message);
        }
    } catch (e) {
        // Ignore errors with output methods
    }
}

// Query for records with Availability Settings Active
const query = await businessResearchTable.selectRecordsAsync({
    filterByFormula: "AND({Availability Settings Active} = TRUE())",
    fields: ['Business Name', 'Availability Settings Active', 'Default Meeting Duration',
            'Sunday Active', 'Sunday Start Time', 'Sunday End Time',
            'Monday Active', 'Monday Start Time', 'Monday End Time',
            'Tuesday Active', 'Tuesday Start Time', 'Tuesday End Time',
            'Wednesday Active', 'Wednesday Start Time', 'Wednesday End Time',
            'Thursday Active', 'Thursday Start Time', 'Thursday End Time',
            'Friday Active', 'Friday Start Time', 'Friday End Time',
            'Saturday Active', 'Saturday Start Time', 'Saturday End Time']
});

if (query.records.length === 0) {
    logOutput("No records with active availability settings found. Aborting.");
    return;
}

// Use the first matching record
const record = query.records[0];
const recordId = record.id;
logOutput(`Found business record: ${record.getCellValue('Business Name')}`);

// Get time slots configuration
// Default to 30 minutes (1800 seconds)
const defaultDuration = 1800;
logOutput(`Using meeting duration: ${defaultDuration} seconds (${defaultDuration/60} minutes)`);

// Get current date and day of week
const currentDate = new Date();
const currentDayOfWeek = currentDate.getDay(); // 0 = Sunday, 1 = Monday, etc.

// Check if target day is 7 days from now (for looking ahead)
const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
logOutput(`Today is ${dayNames[currentDayOfWeek]}, ${currentDate.toLocaleDateString()}`);

// Days configuration lookup
const daysConfig = {
    0: { // Sunday
        active: record.getCellValue('Sunday Active'),
        startTime: record.getCellValue('Sunday Start Time'),
        endTime: record.getCellValue('Sunday End Time')
    },
    1: { // Monday
        active: record.getCellValue('Monday Active'),
        startTime: record.getCellValue('Monday Start Time'),
        endTime: record.getCellValue('Monday End Time')
    },
    2: { // Tuesday
        active: record.getCellValue('Tuesday Active'),
        startTime: record.getCellValue('Tuesday Start Time'),
        endTime: record.getCellValue('Tuesday End Time')
    },
    3: { // Wednesday
        active: record.getCellValue('Wednesday Active'),
        startTime: record.getCellValue('Wednesday Start Time'),
        endTime: record.getCellValue('Wednesday End Time')
    },
    4: { // Thursday
        active: record.getCellValue('Thursday Active'),
        startTime: record.getCellValue('Thursday Start Time'),
        endTime: record.getCellValue('Thursday End Time')
    },
    5: { // Friday
        active: record.getCellValue('Friday Active'),
        startTime: record.getCellValue('Friday Start Time'),
        endTime: record.getCellValue('Friday End Time')
    },
    6: { // Saturday
        active: record.getCellValue('Saturday Active'),
        startTime: record.getCellValue('Saturday Start Time'),
        endTime: record.getCellValue('Saturday End Time')
    }
};

// Check if current day is configured as active
const dayConfig = daysConfig[currentDayOfWeek];
if (!dayConfig.active || !dayConfig.startTime || !dayConfig.endTime) {
    logOutput(`${dayNames[currentDayOfWeek]} is not set as an active day or is missing time settings. No slots will be created.`);
    return;
}

// Time slots to create
const timeSlots = [];

// Parse start and end times
const [startHour, startMinute] = dayConfig.startTime.split(':').map(Number);
const [endHour, endMinute] = dayConfig.endTime.split(':').map(Number);

// Create DateTime objects for today's start and end times
const startDateTime = new Date(currentDate);
startDateTime.setHours(startHour, startMinute, 0, 0);

const endDateTime = new Date(currentDate);
endDateTime.setHours(endHour, endMinute, 0, 0);

// Log the time range
logOutput(`Creating slots for today (${startDateTime.toLocaleDateString()}): ${startDateTime.toLocaleTimeString()} to ${endDateTime.toLocaleTimeString()}`);

// Generate time slots for today
let currentSlot = new Date(startDateTime);
while (currentSlot < endDateTime) {
    const slotEndTime = new Date(currentSlot.getTime() + defaultDuration * 1000);
    
    // Only add the slot if it ends before or at the end time
    if (slotEndTime <= endDateTime) {
        timeSlots.push({
            fields: {
                'Time Slots': currentSlot.toISOString()
                // Duration will be set to default by Airtable itself
            }
        });
    }
    
    // Move to next slot
    currentSlot = new Date(currentSlot.getTime() + defaultDuration * 1000);
}

logOutput(`Created ${timeSlots.length} slots for today (${currentDate.toLocaleDateString()})`);

if (timeSlots.length === 0) {
    logOutput("No time slots to create. Check your availability settings.");
    return;
}

// Create records in batches of 50 (Airtable limit)
const batchSize = 50;
let createdCount = 0;

for (let i = 0; i < timeSlots.length; i += batchSize) {
    const batch = timeSlots.slice(i, i + batchSize);
    try {
        const result = await meetingsAvailabilityTable.createRecordsAsync(batch);
        createdCount += result.length;
        logOutput(`Created batch ${Math.floor(i/batchSize) + 1} of ${Math.ceil(timeSlots.length/batchSize)} (${createdCount}/${timeSlots.length} slots)`);
    } catch (error) {
        logOutput(`Error creating batch ${Math.floor(i/batchSize) + 1}: ${error.message}`);
    }
}

const resultMessage = `Created ${createdCount} meeting availability slots for ${dayNames[currentDayOfWeek]}, ${currentDate.toLocaleDateString()}.`;
logOutput(resultMessage);
אופן הפעולה

איתור רשומת ההגדרות הפעילה: הקוד מחפש רשומות בטבלת Business Research עם הגדרות זמינות פעילות.
בדיקת היום הנוכחי: הקוד בודק האם היום הנוכחי מוגדר כפעיל בהגדרות.
חישוב חלונות זמן: מחשב את כל חלונות הזמן האפשריים ליום הנוכחי בהתאם לשעות ההתחלה והסיום המוגדרות, ביחידות של 30 דקות (1800 שניות).
יצירת רשומות בטבלה: הקוד יוצר את רשומות חלונות הזמן בטבלת Meetings Availability🌻, תוך שליחת הנתונים במנות של עד 50 רשומות (מגבלת API של Airtable).
תיעוד וסיכום: הקוד מתעד את התהליך ומציג סיכום של מספר חלונות הזמן שנוצרו.

בעיות ופתרונות שטופלו

שדה Duration בפורמט מיוחד: זיהינו שהניסיון לשלוח ערך מפורש לשדה Duration⏳ גורם לשגיאה. הפתרון היה להשאיר את השדה ריק ולאפשר לAirtable להשתמש בערך ברירת המחדל שלו.
יצירת רשומות מרובות: תיקנו את הלוגיקה כך שתיצור מספר חלונות זמן בהתאם לשעות הפעילות, ולא רק חלון אחד לכל יום.
מיקוד על היום הנוכחי: במקום ליצור חלונות זמן לטווח תאריכים, שינינו את הקוד כך שייצור רק חלונות זמן ליום הנוכחי.

הגדרת האוטומציה בAirtable
כדי להגדיר את האוטומציה לריצה יומית:

צור אוטומציה חדשה ב-Airtable
הגדר טריגר של זמן מתוזמן (Scheduled Time) ל-6:00 בבוקר בכל יום
הוסף צעד סקריפט (Run Script) והעתק אליו את הקוד

תוצאה מצופה
האוטומציה תיצור חלונות זמן פגישה ליום הנוכחי בלבד, בהתאם להגדרות שקבעת בטבלת Business Research. אם היום לא מוגדר כפעיל או שחסרות הגדרות שעות, לא ייווצרו חלונות זמן.

הערה: האוטומציה מניחה שקיימת כבר טבלת "Meetings Availability🌻" עם השדות הדרושים. אם תזדקק לשינויים בקוד בעתיד, ההערות המפורטות בקוד עצמו יסייעו לך להבין את הלוגיקה ואת השינויים הנדרשים.
